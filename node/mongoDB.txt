{ Mongo: DB }

MongoDB was created by Dwight Merriman and Eliot Horowitz, who had encountered development and scalability issues with traditional relational database approaches while building Web applications at DoubleClick, an Internet advertising company that is now owned by Google Inc. 

According to Merriman, the name of the database was derived from the word humongous to represent the idea of supporting large amounts of data. Merriman and Horowitz helped form 10Gen Inc. in 2007 to commercialize MongoDB and related software. The company was renamed MongoDB Inc. in 2013. 

The database was released to open source in 2009 and is available under the terms of the Free Software Foundation's GNU AGPL Version 3.0 commercial license. 


What is Data?  :                         ‘Alex’
In simple words, data can be facts related to any object in consideration.
For example, your name, age, height, weight, etc are some data related to you.
A picture , image , file , pdf etc can also be considered data.


What is a Database?                 | Alex | Mumbai | 828988898 | 

The database is a systematic collection of data. 
Databases support storage and manipulation of data. 
Databases make data management easy. Let's discuss a few examples.

An online telephone directory would definitely use a database to store data pertaining to people, phone numbers and other contact details, etc.

Your electricity service provider is obviously using a database to manage billing, client related issues, to handle fault data, etc.
Let's also consider Facebook. It needs to store, manipulate and present data related to members, their friends, member activities, messages, advertisements and a lot more.


What is a Database Management System (DBMS)?          |Ali |Khan | 
Database Management System (DBMS) is a collection of programs which enables its users to access the database, manipulate data, reporting/representation of data.

It also helps to control access to the database.

Database Management Systems are not a new concept and as such had been first implemented in the 1960s.





Relational DBMS 
This type of DBMS defines database relationships in the form of tables, also known as relations. 
Unlike network DBMS, RDBMS does not support many to many relationships.
Relational DBMS usually have pre-defined data types that they can support. 
This is the most popular DBMS type in the market. 
Examples of relational database management systems include MySQL, Oracle, and Microsoft SQL Server database.








pData - eduData - jobData - handData - j&kData - sportData

What is SQL?
Structured Query Language (SQL) pronounced as "S-Q-L" or sometimes as "Se-Quel" is actually the standard language for dealing with Relational Databases.

SQL programming can be effectively used to insert, search, update, delete ( Create, Read, Update, Delete ) database records.

That doesn't mean SQL cannot do things beyond that.

In fact, it can do a lot of things including, but not limited to, optimizing and maintenance of databases. 

Relational databases like MySQL Database, Oracle, MSSQL Server, Sybase, etc use SQL! How to use SQL syntaxes?

 SQL syntaxes used in these databases are almost similar, except the fact that some are using a few different syntaxes and even proprietary SQL syntaxes.

SQL Example

 SELECT * FROM Members WHERE Age > 30 




What is NoSQL?
NoSQL is an upcoming category of Database Management Systems. 
Its main characteristic is its non-adherence to Relational Database Concepts. NoSQL means "Not Only SQL". 

The concept of NoSQL databases grew with internet giants such as Google, Facebook, Amazon etc who deal with gigantic volumes of data.

When you use a relational database for massive volumes of data, the system starts getting slow in terms of response time.

To overcome this, we could of course "scale up" our systems by upgrading our existing hardware.

The alternative to the above problem would be to distribute our database load on multiple hosts as the load increases.

This is known as "scaling out".

 NoSQL database is non-relational databases that scale out better than relational databases and are designed with web applications in mind.

They do not use SQL to query the data and do not follow strict schemas like relational models. With NoSQL, ACID (Atomicity, Consistency, Isolation, Durability) features are not guaranteed.

NoSQL database
NoSQL databases are useful for large sets of distributed data.

NoSQL databases are effective for big data performance issues that relational databases aren't built to solve. 
They are most effective when an organization must analyze large chunks of unstructured data or data that are stored across multiple virtual servers in the cloud.


Purpose to build MongoDB
     "what was the need for MongoDB although there were many databases in action?"

This is a very simple answer:

“All modern applications require big data, fast features development, flexible deployment and the older database systems are not competent enough, so the MongoDB was obviously needed.”

The main purpose to build MongoDB:

Scalability
Performance
High Availability
Scaling from single server deployments to large, complex multi-site architectures.

Key points of MongoDB: 

Develop Faster
Deploy Easier
Scale Bigger



Database: in Mongo
The database is a physical container for collections. Each DB gets its own set of files on the file system.
A single MongoDB server typically has multiple databases.

Collection :

A collection is a group of an RDBMS table. A collection exists within a single database. Documents within a collection can have different fields. Typically, all documents in a collection are of similar or related purpose.




Document :

A document is a set of key-value pairs. Documents have a dynamic schema. Dynamic schema means that documents in the same set of fields or structure and common fields in a collection's documents may hold different types of data.



Features of MongoDB
These are some important features of MongoDB:

1.  Support ad hoc queries

In MongoDB, you can search by field, range query and it also supports regular expression searches.

2. Indexing

You can index any field in a document.

3. Replication

MongoDB supports Master-Slave replication.

A master can perform Reads and Writes and a Slave copies data from the master and can only be used for reads or back up (not writes)

4. Duplication of data

MongoDB can run over multiple servers. The data is duplicated to keep the system up and also keep its running condition in case of hardware failure.

5. Load balancing

It has an automatic load balancing configuration because of data placed in shards.

6. Supports map reduce and aggregation tools.

7. Uses JavaScript instead of Procedures.

8. It is a schema-less database written in C++.

9. Provides high performance.

10. Stores files of any size easily without complicating your stack.

11. Easy to administer in the case of failures.

12. It also supports:

JSON data model with dynamic schemas
Auto-sharding for horizontal scalability
Built-in replication for high availability


Example of a database:

MongoDB stores data as documents, so it is known as the document-oriented database. It is a key feature of MongoDB. It offers document-oriented storage. It is very simple and you can program it easily.


FirstName = "Ajeet",                                                                                                           
Address = "Laxmi Nagar",                                                                                                   
Spouse = [{Name: "Charu"}].                                                                                           
FirstName ="Ravi",  
Address = "Loni"  


There are two different documents (separated by ".").

Storing data in this manner is called the document-oriented database.


The following table shows the relationship of RDBMS terminology with MongoDB.
RDBMS
MongoDB
Database
Database
Table
Collection
Tuple/Row
Document
column
Field
Table Join
Embedded Documents
Primary Key
Primary Key (Default key _id provided by MongoDB itself)


Installation:

Date: 4 Apr 2021

Working with the mongo Shell
To display the database you are using, type db:
> db 
test 
The operation should return   > test , which is the default database.

To switch databases, issue the use <db> helper, as in the following example:
> use <database>

You can switch to non-existing databases. When you first store data in the database, such as by creating a collection, MongoDB creates the database. For example, the following creates both the database myNewDatabase and the collection myCollection during the insertOne() operation:

> use myNewDatabase
> db.myCollection.insertOne( { x: 1 } );
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5f3e214c1fbd2a6371f2f990")
}
> db.myCollection.insert( { x: 1 } );
WriteResult({ "nInserted" : 1 })
>
The db.myCollection.insertOne() is one of the methods available in the mongo shell.
db refers to the current database.
myCollection is the name of the collection.
If the mongo shell does not accept the name of a collection, you can use the alternative db.getCollection() syntax. For instance, if a collection name contains a space or hyphen, starts with a number, or conflicts with a built-in function:
select * from myCollection
db.getCollection("myCollection").find()
db.getCollection(var).find();

db.myCollection.find();

 



Syntax:

Use dbName     //  db=dbName

Syntax = >  db.collection.document    ex. db.createCollection(‘collectionName’);

database.collection.documentMethods( )    ex.   db.collectionName.insert({‘name’: ‘Alex’})

use DATABASE_NAME  
If the database already exists, it will return the existing database.

Let's take an example to demonstrate how a database is created in MongoDB. In the following example, we are going to create a database "demodb".

See this example

>use demodb  
Switched to db demodb


To check the currently selected database, use the command db:

>db  
demodb

To check the database list, use the command show dbs:

>show dbs  
local 0.078GB


Here, your created database "demodb" is not present in the list, insert at least one document into it to display database:

>db.myCollection.insert({"name":"test"})  
WriteResult({ "nInserted": 1})

>show dbs  
demodb 0.000GB
local 0.078GB



MongoDB Drop Database
The dropDatabase command is used to drop a database. It also deletes the associated data files. It operates on the current database.

Syntax:

db.dropDatabase()  
This syntax will delete the selected database. In case you have not selected any database, it will delete default "test" database.

To check the database list, use the command show dbs:

>show dbs  
local 0.078GB
If you want to delete the database "demodb", use the dropDatabase() command as follows:

>use demodb  
switched to the db demodb

>db.dropDatabase()  
{ "dropped": "demodb", "ok": 1}
Now check the list of databases:

>show dbs  
local 0.078GB



MongoDB Create Collection
In MongoDB, db.createCollection(name, options) is used to create a collection. But usually you don?t need to create a collection. MongoDB creates a collection automatically when you insert some documents. It will be explained later. First see how to create collection:

Syntax:

db.createCollection(name, options) 

  
Here,

Name: is a string type, specifies the name of the collection to be created.

Options: is a document type, specifies the memory size and indexing of the collection. It is an optional parameter.



Let's take an example to create a collection. In this example, we are going to create a collection named SSSIT.

>use test  
switched to db test

>db.createCollection("myNewCollection")  
{ "ok" : 1 }

To check the created collection, use the command "show collections".

>show collections  
myNewCollection


How does MongoDB create collection automatically
MongoDB creates collections automatically when you insert some documents. For example: Insert a document named seomount into a collection named SSSIT. The operation will create the collection if the collection does not currently exist.

>db.myNewCollection.insert({"name" : "seomount"})    
>show collections    
myNewCollection  


If you want to see the inserted document, use the find() command.

Syntax:

db.collection_name.find()



MongoDB Drop collection

In MongoDB, db.collection.drop() method is used to drop a collection from a database. It completely removes a collection from the database and does not leave any indexes associated with the dropped collections.

The db.collection.drop() method does not take any argument and produce an error when it is called with an argument. This method removes all the indexes associated with the dropped collection.

Syntax:

db.COLLECTION_NAME.drop()  

MongoDB Drop collection example

Let's take an example to drop collection in MongoDB.

First check the already existing collections in your database.

>use mydb  
Switched to db mydb 

> show collections  
SSSIT
system.indexes

Note: Here we have a collection named SSSIT in our database.

Now drop the collection with the name SSSIT:

>db.SSSIT.drop()  
True

Now check the collections in the database:

>show collections  
System.indexes

Now, there are no existing collections in your database.

Note: The drop command returns true if it successfully drops a collection. It returns false when there is no existing collection to drop.






MongoDB insert documents
In MongoDB, the db.collection.insert() method is used to add or insert new documents into a collection in your database.

Upsert

There are also two methods "db.collection.update()" method and "db.collection.save()" method used for the same purpose. These methods add new documents through an operation called upsert.

Upsert is an operation that performs either an update of existing document or an insert of new document if the document to modify does not exist.

Syntax

>db.COLLECTION_NAME.insert(document)  

Let's take an example to demonstrate how to insert a document into a collection. In this example we insert a document into a collection named demoCollection. This operation will automatically create a collection if the collection does not currently exist.

Example

db.myCollection.insert({
 data: [
   {
     id: 1001,
     name: "Samsung SCREEN 3",
     description: "5.5 Screen for Moto g",
     inStock: 10,
     colorName: "Blue",
     isOnline: false,
     country: "India",
     price: 12000,
     prodImg: "../../../assets/img/mob2.png",
     clsVar: true,
     qntt: 0,
   },
   {
     id: 1002,
     name: "screen 5",
     description: "5 Screen for Samsung",
     inStock: 8,
     colorName: "red",
     isOnline: true,
     country: "Germany",
     price: 12000,
     prodImg: "../../../assets/img/mob2.png",
     clsVar: true,
     qntt: 0,
   },
   {
     id: 1003,
     name: "Key Panel",
     description: "Key panel for Nokia",
     inStock: 12000,
     colorName: "green",
     isOnline: false,
     country: "",
     price: 12000,
     prodImg: "../../../assets/img/mob2.png",
     clsVar: true,
     qntt: 0,
   },
 ],
});
 



After the successful insertion of the document, the operation will return a WriteResult object with its status.

Output:

WriteResult({ "nInserted" : 1 })

Here the nInserted field specifies the number of documents inserted. If an error is occurred then the WriteResult will specify the error information.

Check the inserted documents
If the insertion is successful, you can view the inserted document by the following query.

>db.demoCollection.find()  

You will get the inserted document in return.

Output:

{ "_id" : ObjectId("56482d3e27e53d2dbc93cef8"), "course" : "java", "details" : 
{ "duration" : "6 months", "Trainer" : "Sonoo jaiswal" }, "Batch" : 
[ {"size" : "Small", "qty" : 15 }, { "size" : "Medium", "qty" : 25 } ],
 "category" : "Programming language" }


Note: Here, the ObjectId value is generated by MongoDB itself. It may differ from the one shown.

MongoDB insert multiple documents
If you want to insert multiple documents in a collection, you have to pass an array of documents to the db.collection.insert() method.

Create an array of documents
Define a variable named Allcourses that hold an array of documents to insert.


======================================

MEAN Project

======================================
Angular 
Node
Exp
Mongo
RestFulApi
Node_modules packages
Mongoose
Postman
cURL
CORS
Nodemon
Mat.ang  or ngb  [  bootstrap or mat-css  +  jquery ]

Environment Setup:

#1. MongoDB
mongod --dbpath <path to data/db directory>
[  EX:      mongod --dbpath /usr/local/mongo/data/db  ]

mongo 
[ in another terminal ]

#2. Create a Project folder
#3. In a project folder, create  another folder  manage-products
#4. Go to manage-products and run npm init  --yes        // to create package.json

#5. npm install express mongoose cors body-parser nodemon --save                   // for windows
         Or
        sudo npm install express mongoose cors body-parser nodemon --save   	// for Linux and MAC
{
 
{
 "name": "manage-products",
 "version": "1.0.0",
 "description": "",
 "main": "index.js",
 "scripts": {
   "test": "echo \"Error: no test specified\" && exit 1"
 },
 "keywords": [],
 "author": "",
 "license": "ISC",
 "dependencies": {
   "body-parser": "^1.19.0",
   "cors": "^2.8.5",
   "express": "^4.17.1",
   "mongoose": "^5.9.28",
   "nodemon": "^2.0.6"
 
 }
}
 
 
What is express JS used for?
What is Express? It's a web framework that lets you structure a web application to handle multiple different http requests at a specific url. Express is a minimal, open-source and flexible Node. js web app framework designed to make developing websites, web apps, & API's much easier.

What is Mongoose in ExpressJS and its work?  [ ExpressJs  <--  Mongoose <-- Mongo ]
Mongoose: Mongoose is a MongoDB object modelling tool designed to work in an asynchronous environment. 
Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node. js. It manages relationships between data, provides schema validation, and is used to translate between objects in code and the representation of those objects in MongoDB.
 
How does Cors work?
The CORS standard is needed because it allows servers to specify not just who can access their assets, but also how the assets can be accessed. Cross-origin requests are made using the standard HTTP request methods.
The browser's same-origin policy blocks reading a resource from a different origin. This mechanism stops a malicious site from reading another site's data, but it also prevents legitimate uses
 
How Cors works in Express?
The easiest way to get CORS working in Express is by using the cors npm module. That's it. CORS is now enabled. The Access-Control-Allow-Origin header determines which origins are allowed to access server resources over CORS (the * wildcard allows access from any origin)
 
What is Nodemon used for?
Nodemon is a utility that will monitor for any changes in your source and automatically restart your server. Perfect for development. 
	
nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected. nodemon does not require any additional changes to your code or method of development. 

 
 
 
 
What is an API?
An API is an application programming interface. It is a set of rules that allow programs to talk to each other. The developer creates the API on the server and allows the client to talk to it.
An API for a website is a code that allows two software programs to communicate with each other. The API spells out the proper way for a developer to write a program requesting services from an operating system or other application.
 
What is a RESTful API (REST API)?
 
A RESTful API is an application program interface (API) that uses HTTP requests to GET, PUT, POST and DELETE data.
REST determines how the API looks like. It stands for “Representational State Transfer”. It is a set of rules that developers follow when they create their API. One of these rules states that you should be able to get a piece of data (called a resource) when you link to a specific URL.
 
Each URL is called a request while the data sent back to you is called a response.
 
‘A Request’ in  API
It’s important to know that a request is made up of four things:
The endpoint: URL
The methods: for data manipulation
The headers : information { content/type:html, status:200} 
The body (or Data)
The endpoint (or API route) is the url you request for. It follows this structure:
 
https://products.com/api/data?
https://api.github.com/?

 
The root-endpoint is the starting point of the API you’re requesting from. 
The path determines the resource you’re requesting. 
 
 
A RESTful web service request contains An Endpoint URL. An application implementing a RESTful API will define one or more URL endpoints with a domain, port, path, and/or query-string

You can access paths just like you can link to parts of a website. 
For example, to get a list of all products from ‘onlineshopping’, you navigate to https://www.onlineshopping.com/api/products/
 
https://www.onlineshopping.com/ is the root-endpoint and /api/products/ is the path.
 
/api/product/:id/
 
:id -> params [URL, lessAmtData(char, num, symbol), HighSpeed]
Data -> body [ document, largeAmtData(text, files), slow.] 
[ not ?queryParams ]
 
var name in URL : name
Any colons (:) on a path denotes a variable. You should replace these values with actual values when you send your request. 
 
The final part of an endpoint is query parameters. Technically, query parameters are not part of the REST architecture, but you’ll see lots of APIs use them. So, to help you completely understand how to read and use API’s we’re also going to talk about them. 
Query parameters give you the option to modify your request with key-value pairs. 
They always begin with a question mark (?). Each parameter pair is then separated with an ampersand (&), like this:
 
?name=mobile&price=1200
ex:
https://www.onlineshopping.com/api/products/?sort=price
 
Testing Endpoints With cURL
 
We’ll use the command line utility called cURL. We use cURL because API documentations are normally written with reference to cURL.
 
Before you continue, you’ll want to make sure you have cURL installed on your machine. 
Open up your Terminal and type curl -version. 
This command checks the version of cURL you have installed on your system.
 
curl --version
 
To use cURL, you type curl, followed by the endpoint you’re requesting for. 
For example, 
 
curl http://localhost:3000/api/products
 
curl -i http://localhost:3000/api/products
 
JSON
 
JSON (JavaScript Object Notation) a common format for sending and requesting data through a REST API. 
The response that the server sends back to you is also formatted as JSON.
A JSON object looks like a JavaScript Object. In JSON, each property and value must be wrapped with double quotation marks, like this:
{
  "prodId": "1001",
  "prodName": "mobile screen",
  "prodPrice": "1200"
}
Not allowed  = ‘ ‘  ;  //

 
The Method
The method is the type of request you send to the server. You can choose from these five types below:
GET
POST
PUT
PATCH
DELETE
These methods provide meaning for the request you’re making. 
They are used to perform four possible actions: Create, Read, Update and Delete (CRUD).

 
router.get("/products", callBack);
 

 
Router.get("/products/"+ _id, callBack);
 
 

 
router.put("/product"+ _id, { body }, callBack);
 
 
 
 
 

 
router.delete("/product/"+ _id, callBack);
 
 

 
router.post("/product", { body }, callBack);
 
 
 

Method: Request Meaning
GET: This request is used to get a resource from a server. If you perform a `GET` request, the server looks for the data you requested and sends it back to you. In other words, a `GET` request performs a `READ` operation. This is the default request method.
POST: This request is used to create a new resource on a server. If you perform a `POST` request, the server creates a new entry in the database and tells you whether the creation is successful. In other words, a `POST` request performs an `CREATE` operation.
PUT / PATCH: These two requests are used to update a resource on a server. If you perform a `PUT` or `PATCH` request, the server updates an entry in the database and tells you whether the update is successful. In other words, a `PUT` or `PATCH` request performs an `UPDATE` operation.
DELETE: This request is used to delete a resource from a server. If you perform a `DELETE` request, the server deletes an entry in the database and tells you whether the deletion is successful. In other words, a `DELETE` request performs a `DELETE` operation.

The API lets you know what request method to use for each request. 
 
You can set the request method in cURL by writing -X or --request [ method ] , followed by the request method. This command below tries to create a repository via cURL:
curl -X GET https://www.onlineshopping.com/api/products
 
The Headers
Headers are used to provide information to both the client and server. It can be used for many purposes, such as authentication and providing information about the body content. You can find a list of valid headers on MDN’s HTTP Headers Reference.
HTTP Headers are property-value pairs that are separated by a colon. The example below shows a header that tells the server to expect JSON content.
"Content-Type: application/json". Missing the opening ".
 
You can send HTTP headers with curl through the -H or --header option. To send the above header to Github’s API, you use this command:
curl -H "Content-Type: application/json" https://www.onlineshopping.com
 
The Body (Or “data”)
The data (sometimes called “body” or “message”) contains information you want to be sent to the server. This option is only used with POST, PUT, PATCH or DELETE requests.
 
To send data through cURL, you can use the -d or --data option:
curl -X POST <URL> -d prodName=mobile
 
To send multiple data fields, you can create multiple -d options:
curl -X POST <URL> -d prodName=mobile -d prodName=mobile
 
If it makes sense, you can break your request into multiple lines \ to make it easier to read:
curl -X POST <URL> \
  -d prodName=mobile \
  -d prodName=mobile
 
By default, cURL sends data as if they’re sent through “form fields” on a page. If you wish to send JSON data, you’ll need to set the Content-Type to application/json, and you’ll need to format your data as a JSON object, like this:
curl -X POST <URL> \
  -H "Content-Type: application/json" \
  -d '{
  "Property1":"value1",
  "Property2":"value2"
}'
 
HTTP Status Codes And Error Messages
 
Some of the messages you’ve received earlier, like “Requires authentication” and “Problems parsing JSON” are error messages. They only appear when something is wrong with your request. HTTP status codes let you tell the status of the response quickly. The range from 100+ to 500+. In general, the numbers follow the following rules:
200+ means the request has succeeded.
300+ means the request is redirected to another URL
400+ means an error that originates from the client has occurred
500+ means an error that originates from the server has occurred
 
 
 
What is REST API vs SOAP?
REST API has no has no official standard at all because it is an architectural style. SOAP API, on the other hand, has an official standard because it is a protocol. REST APIs uses multiple standards like HTTP, JSON, URL, and XML while SOAP APIs is largely based on HTTP and XML

 
SOAP vs REST Web Services
There are many differences between SOAP and REST web services. 
No.
SOAP
REST
1)
SOAP is a protocol.
REST is an architectural style.
2)
SOAP stands for Simple Object Access Protocol.
REST stands for REpresentational State Transfer.
3)
SOAP can't use REST because it is a protocol.
REST can use SOAP web services because it is a concept and can use any protocol like HTTP, SOAP.
4)
SOAP uses services interfaces to expose the business logic.
REST uses URI to expose business logic.
5)
JAX-WS is the java API for SOAP web services.
JAX-RS is the java API for RESTful web services.
6)
SOAP defines standards to be strictly followed.
REST does not define too many standards like SOAP.
7)
SOAP requires more bandwidth and resources than REST.
REST requires less bandwidth and resources than SOAP.
8)
SOAP defines its own security.
RESTful web services inherit security measures from the underlying transport.
9)
SOAP permits XML data format only.
REST permits different data formats such as Plain text, HTML, XML, JSON etc.
10)
SOAP is less preferred than REST.
REST more preferred than SOAP.






=========================================================================================================================
#13 Writing RestFullAPI  
=========================================================================================================================

-----------------------------------------------------------------------------------------------------------
routse.js
-----------------------------------------------------------------------------------------------------------



// routes.js
 
const express = require("express");
 
// express.Router() : Routing refers to how an application's endpoints (URIs) respond to client requests.
// For an introduction to routing, see Basic routing.
// You define routing using methods of the Express app object that correspond to HTTP methods.
 
const router = express.Router();
 
// Product : to find(), save() and remove()
const Product = require("../model/product");
 
// retrieving products list
// http://localhost:3000/api/products
router.get("/products", (req, res, next) => {
 //   res.send("<h1>Retrieving the products list</h1>");  // comment this line
 
 Product.find(function (err, products) {
   if (err) console.log("routes.js: err to 'find()' products : ", err); 
   res.json(products);
 });
 
 // visit to see products info ->  http://localhost:3000/api/products
});
 
// add product
router.post("/product", (req, res, next) => {
 // logic to add product
 
 let newProduct = new Product({
   prodId: req.body.prodId,
   prodName: req.body.prodName,
   price: req.body.price,
 });
 
 newProduct.save((err, product) => {
   console.log("routes->save(): product : ", product);
   if (err) {
     res.json({ msg: "Failed to add Product" });
   } else {
     res.json({ msg: "Product added successfully...!", newProduct: product });
   }
 });
});
 
// delete product
router.delete("/product/:id", (req, res, next) => {
 //logic to delete product
 
 Product.remove({ _id: req.params.id }, function (err, result) {
   if (err) {
     res.json(err);
   } else {
     res.json(result);
   }
 });
});
 
module.exports = router;
 
 
=========================================================================================================================
#14 POSTMAN  
=========================================================================================================================
i. Select POST method
ii. Select Headers
	iii. Set key: Content-Type         &      Value: application/json




====================================================================================
i. Select Body
ii. Select raw 
iii. Insert API URL : localhost:3000/api/product

	iv. Insert record(s)
{
	"prodId": "1001",
	"prodName": "Mobile Screen",
	"price": "1200"
}

V. click ‘Send’ button
===================================================================================




===================================================================================



 #15 Comment dummy res to see all records : route.js

 
// retrieving products list
router.get("/products", (req, res, next) => {
 //   res.send("<h1>Retrieving the products list</h1>");  // comment this line
 
 Product.find(function (err, products) {
   if (err) console.log("routes.js: err to 'find()' products : ", err);
   res.json(products);
 });
 // visit to see products info ->  http://localhost:3000/api/products
});
 


#16   GET    ->     localhost:3000/api/products

Creating ANGULAR app
 

===================================================================================================================
#17 create client under  manage-products/products-view  >ng new products-view 
====================================================
i. Create products component [ ng g c products -is --skip-tests ]
ii. Create product service [ ng g s products --skip-tests ]

iii. Create a Schema file [ app/product.ts ]
