Node Js
An open-source server-side runtime javascript environment which provides a rich library of various JavaScript modules to simplify the development of web applications.  
─
History
Node.js was originally written by Ryan Dahl in 2009.
In January 2010, a package manager was introduced for the Node.js environment called npm.
In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.
The first Node.js build supporting Windows was released in July 2011.
In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0. This brought V8 ES6 features into Node.js, and a long-term support release cycle.

Overview
Node.js is an open-source server-side runtime environment built on Chrome's V8 JavaScript engine. 
Node.js allows you to run JavaScript on the server.
It provides an event-driven, non-blocking (asynchronous) I/O and cross-platform runtime environment for building highly scalable server-side applications using JavaScript.
It is used to develop I/O intensive web applications like video streaming sites, single-page applications, and other web applications.

Node.js official website: https://nodejs.org

Advantages of Node.js
Node.js is an open-source under the MIT license. (MIT license is a free software license originating at the Massachusetts Institute of Technology (MIT).)
Uses JavaScript to build an entire server-side application.
A lightweight framework that includes bare minimum modules. Other modules can be included as per the need of an application.
Asynchronous by default. So it performs faster than other frameworks.
A cross-platform framework that runs on Windows, MAC or Linux.
Setup Development Environment
The following tools/SDK are required for developing a Node.js application on any platform.

Node.js
Node Package Manager (NPM)
IDE (Integrated Development Environment) or Text Editor

NPM (Node Package Manager) is included in Node.js installation since Node version 0.6.0., so there is no need to install it separately.

Install Node.js on Windows
Visit Node.js official web site https://nodejs.org
It will automatically detect OS and display download links as per your Operating System.

For MSI



For MAC / Linux 


After you download, double-click on it to start the installation as shown below.

Verify Installation
Once you install Node.js on your computer, you can verify it by opening the command prompt and typing node -v. If Node.js is installed successfully then it will display the version of the Node.js installed on your machine, as shown below.

Node.js Console
Node.js Console:
Node.js comes with a virtual environment called REPL (aka Node shell). REPL stands for Read-Eval-Print-Loop. It is a quick and easy way to test simple Node.js/JavaScript code.

To launch the REPL (Node shell), open a command prompt (in Windows) or terminal (in Mac or UNIX/Linux) and type node as shown below. It will change the prompt to > in Windows and MAC.

Node.js/JavaScript expression:
---------------------------------------------------------------------------------------------------------------------

> 10 + 20 
30
------------------------------------------------------------------------------------------------------------------------

> "Hello" + "World" 
Hello World

------------------------------------------------------------------------------------------------------------------------
> var x = 10, y = 20; 
> x + y 
30
---------------------------------------------------------------------------------------------------------------------

External JavaScript file
external JavaScript file by writing node <fileName> command. 

node example.js
---------------------------------------------------------------------------------------------------------------------

 
console.log("Hello from Server side JS...!");
 
document.write("Hello from Client side JS...!");  
 
// Error
document.write("Hello from Client side JS...!");
^
ReferenceError: document is not defined
 
 

---------------------------------------------------------------------------------------------------------------------

example.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Document</title>
  </head>
  <body>
    <script>
      console.log("Hello from Client side JS...!");
      document.write("Hello from Client side JS...!");
    </script>
  </body>
</html>
 

 node node-example.js
Node.js Basics
Primitive Types:
Node.js includes the following primitive types:

String
Number
Boolean
Undefined
Null
RegEx
Date
Symbol   a===a

Loose Typing
JavaScript in Node.js supports loose typing like the browser's JavaScript. 
Use the var keyword to declare a variable of any type.

Object Literal

Object literal syntax is the same as the browser's JavaScript.
---------------------------------------------------------------------------------------------------------------------
// json  -> API
var obj = {
    name: 'Ryan Dahl',
    language: 'Node.js'
}
(name, age)
return = {name, age}
---------------------------------------------------------------------------------------------------------------------

Functions

A function can have attributes and properties also. It can be treated like a class in JavaScript.

Example: Function
---------------------------------------------------------------------------------------------------------------------

function Display(x) { 
    console.log(x);
}
Display(100);
---------------------------------------------------------------------------------------------------------------------

Buffer

Node.js includes an additional data type called Buffer (not available in browser's JavaScript). 
Buffer is mainly used to store binary data while reading from a file or receiving packets over the network.
REPL commands.

The following table lists important REPL commands.
REPL stands for Read Eval Print Loop and it represents a computer environment like a Windows console or Unix/Linux shell where a command is entered and the system responds with an output in an interactive mode. Node.js or Node comes bundled with a REPL environment. It performs the following tasks −
Read − Reads user's input, parses the input into JavaScript data-structure, and stores in memory.
Eval − Takes and evaluates the data structure.
Print − Prints the result.
Loop − Loops the above command until the user presses ctrl-c twice.
The REPL feature of Node is very useful in experimenting with Node.js codes and to debug JavaScript codes.
To simplify your learning, we have set up an easy to use Node.js REPL environment online, where you can practice Node.js syntax − Launch Node.js REPL Terminal 
Starting REPL
REPL can be started by simply running node on shell/console without any arguments as follows.
$ node

You will see the REPL Command prompt > where you can type any Node.js command −
$ node
>

Simple Expression
Let's try a simple mathematics at the Node.js REPL command prompt −
$ node
> 1 + 3
4
> 1 + ( 2 * 3 ) - 4
3
>

Use Variables
You can make use of variables to store values and print later like any conventional script. If var keyword is not used, then the value is stored in the variable and printed. Whereas if var keyword is used, then the value is stored but not printed. You can print variables using console.log().
$ node
> x = 10
10
> var y = 10
undefined
> x + y
20
> console.log("Hello World")
Hello World
undefined

Multiline Expression
Node REPL supports multiline expressions similar to JavaScript. Let's check the following do-while loop in action −
$ node
> var x = 0
undefined
> do {
   x++;
  console.log("x: " + x);
   } 
while ( x < 5 );
x: 1
x: 2
x: 3
x: 4
x: 5
undefined
>

... comes automatically when you press Enter after the opening bracket. Node automatically checks the continuity of expressions.
Underscore Variable
You can use underscores (_) to get the last result −
$ node
> var x = 10
undefined
> var y = 20
undefined
> x + y
30
> var sum = _
undefined
> console.log(sum)
30
undefined
>

Stopping REPL
As mentioned above, you will need to use ctrl-c twice to come out of Node.js REPL.
$ node
>
(^C again to quit)
>

---------------------------------------------------------------------------------------------------------------------

REPL Command	Description
.help				Display help on all the commands
tab Keys			Display the list of all commands.
Up/Down Keys		See previous commands applied in REPL.
.save filename		Save current Node REPL session to a file.
.load filename		Load the specified file in the current Node REPL session.
ctrl + c			Terminate the current command.
ctrl + c (twice)		Exit from the REPL.
ctrl + d			Exit from the REPL.
.break			Exit from multiline expressions.
.clear				Exit from multiline expressions.
---------------------------------------------------------------------------------------------------------------------

Process Object

Each Node.js script runs in a process. It includes a process object to get all the information about the current process of Node.js applications.

The following example shows how to get process information in REPL using a process object.
---------------------------------------------------------------------------------------------------------------------
> process.execPath 
'C:\\Program Files\\nodejs\\node.exe'
> process.pid
1652
> process.cwd()
'C:\\'
---------------------------------------------------------------------------------------------------------------------


Module in Node.js 
“Module in Node.js is a simple or complex functionality organized in single or multiple JavaScript files which can be reused throughout the Node.js application.”

Each module in Node.js has its own context, so it cannot interfere with other modules or pollute the global scope. Also, each module can be placed in a separate .js file under a separate folder.

Node.js implements CommonJS modules standard  [ https://requirejs.org/docs/commonjs.html ]. CommonJS is a group of volunteers who define JavaScript standards for web-server, desktop, and console applications.

Module Types

Node.js includes three types of modules:

Core Modules
Local Modules
Third Party Modules

NodeJs Core Modules

Node.js is a lightweight framework. The core modules include bare minimum functionalities of Node.js. These core modules are compiled into its binary distribution and load automatically when Node.js processes start. However, you need to import the core module first in order to use it in your application.

The following table lists some of the important core modules in Node.js.


Core Module
Description
http
http module includes classes, methods and events to create Node.js http server.
url
url module includes methods for URL resolution and parsing.
querystring
querystring module includes methods to deal with query strings.
path
path module includes methods to deal with file paths.
fs
fs module includes classes, methods, and events to work with file I/O.
util
util module includes utility functions useful for programmers.


